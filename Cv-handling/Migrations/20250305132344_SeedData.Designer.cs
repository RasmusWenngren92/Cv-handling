// <auto-generated />
using System;
using Cv_handling.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cv_handling.Migrations
{
    [DbContext(typeof(CvDbContext))]
    [Migration("20250305132344_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cv_handling.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationId"));

                    b.Property<DateOnly>("GraduationDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsAlumni")
                        .HasColumnType("bit");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SchoolTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EducationId");

                    b.HasIndex("UserId");

                    b.ToTable("Education");

                    b.HasData(
                        new
                        {
                            EducationId = 1,
                            GraduationDate = new DateOnly(2014, 6, 1),
                            IsAlumni = true,
                            SchoolName = "University of Awesome",
                            SchoolTitle = "Bachelor's Degree",
                            StartDate = new DateOnly(2010, 9, 1)
                        },
                        new
                        {
                            EducationId = 2,
                            GraduationDate = new DateOnly(2017, 6, 1),
                            IsAlumni = true,
                            SchoolName = "Institute of Greatness",
                            SchoolTitle = "Master's Degree",
                            StartDate = new DateOnly(2015, 9, 1)
                        });
                });

            modelBuilder.Entity("Cv_handling.Models.Experience", b =>
                {
                    b.Property<int>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperienceId"));

                    b.Property<int>("EducationIdFk")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkIdFk")
                        .HasColumnType("int");

                    b.HasKey("ExperienceId");

                    b.HasIndex("EducationIdFk");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkIdFk");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("Cv_handling.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Birthday = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "+1234567890"
                        },
                        new
                        {
                            UserId = 2,
                            Birthday = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janesmith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PhoneNumber = "+1987654321"
                        });
                });

            modelBuilder.Entity("Cv_handling.Models.Work", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly>("Duration")
                        .HasColumnType("date");

                    b.Property<string>("WorkTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WorkId");

                    b.ToTable("Work");

                    b.HasData(
                        new
                        {
                            WorkId = 1,
                            CompanyName = "Tech Corp",
                            Description = "Worked as a software engineer on various web projects.",
                            Duration = new DateOnly(2015, 5, 1),
                            WorkTitle = "Software Engineer"
                        },
                        new
                        {
                            WorkId = 2,
                            CompanyName = "Creative Solutions",
                            Description = "Managed multiple projects and led teams to success.",
                            Duration = new DateOnly(2017, 8, 15),
                            WorkTitle = "Project Manager"
                        });
                });

            modelBuilder.Entity("UserWork", b =>
                {
                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.Property<int>("WorksWorkId")
                        .HasColumnType("int");

                    b.HasKey("UsersUserId", "WorksWorkId");

                    b.HasIndex("WorksWorkId");

                    b.ToTable("UserWork");
                });

            modelBuilder.Entity("Cv_handling.Models.Education", b =>
                {
                    b.HasOne("Cv_handling.Models.User", null)
                        .WithMany("Educations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Cv_handling.Models.Experience", b =>
                {
                    b.HasOne("Cv_handling.Models.Education", "Education")
                        .WithMany("Experiences")
                        .HasForeignKey("EducationIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cv_handling.Models.User", null)
                        .WithMany("Experiences")
                        .HasForeignKey("UserId");

                    b.HasOne("Cv_handling.Models.Work", "Work")
                        .WithMany("Experiences")
                        .HasForeignKey("WorkIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("UserWork", b =>
                {
                    b.HasOne("Cv_handling.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cv_handling.Models.Work", null)
                        .WithMany()
                        .HasForeignKey("WorksWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cv_handling.Models.Education", b =>
                {
                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("Cv_handling.Models.User", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("Cv_handling.Models.Work", b =>
                {
                    b.Navigation("Experiences");
                });
#pragma warning restore 612, 618
        }
    }
}
